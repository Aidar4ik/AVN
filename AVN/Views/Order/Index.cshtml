@model OrderVM
@{
    ViewData["Title"] = "Приказы";
}
@using (Html.BeginForm())
{
    <form method="post" id="orderForm">
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group row mb-1">
                    <div class="col-lg-5">
                        <select id="facultyFromDropdown" name="facultyFromDropdown" class="form-control"></select>
                    </div>
                    <div class="col-lg-2  text-center">
                        <label id="facultiesLbl" class="font-weight-bold">- ФАКУЛЬТЕТЫ -</label>
                    </div>
                    <div class="col-lg-5">
                        <select id="facultyToDropdown" name="facultyToDropdown" class="form-control"></select>
                    </div>
                </div>
                <br>
                <div class="form-group row mb-1">
                    <div class="col-md-2 text-center">
                        <label class="font-weight-bold">Учебный год</label>
                        <select id="academYearFirstDropdown" name="academYearFirstDropdown" class="form-control"></select>
                    </div>
                    <div class="col-md-2 text-center">
                        <label class="font-weight-bold">Из группы</label>
                        <select id="groupFromDropdown" name="groupFromDropdown" class="form-control"></select>
                    </div>
                    <div class="col-md-4 text-center">
                        <label class="font-weight-bold">Тип перемещения</label>
                        @*<select id="movementTypeDropdown" name="movementTypeDropdown" class="form-control"></select>*@
                        @Html.DropDownListFor(x => x.MovementTypeId, new List<SelectListItem>(), new { @class = "form-control", id = "movementTypeDropdown" })
                    </div>
                    <div class="col-md-2 text-center">
                        <label id="groupToDropdownId" class="font-weight-bold">В группу</label>
                        @*<select id="groupToDropdown" name="groupToDropdown" class="form-control"></select>*@
                        @Html.DropDownListFor(x => x.GroupId, new List<SelectListItem>(), new { @class = "form-control", id = "groupToDropdown" })
                    </div>
                    <div class="col-md-2 text-center">
                        <label class="font-weight-bold">Учебный год</label>
                        @*<select id="academYearSecondDropdown" name="academYearSecondDropdown" class="form-control"></select>*@
                        @Html.DropDownListFor(x => x.AcademicYearId, new List<SelectListItem>(), new { @class = "form-control", id = "academYearSecondDropdown" })
                    </div>
                </div>
            </div>
        </div>

        <hr>

        <div class="row">
            <div class="col-md-6">
                <div id="LeftContainer"></div>
            </div>
            <div class="col-md-6">
                <div id="RightContainer"></div>
            </div>
        </div>
        <hr />

        <div class="container">
            <div class="row">
                <div class="col-lg-12 row">
                    @Html.HiddenFor(x => x.MovementTypeId)
                    @Html.HiddenFor(x => x.AcademicYearId)
                    @Html.HiddenFor(x => x.GroupId)
                    <div class="col-md-2 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Date)</label>
                        @Html.TextBoxFor(x => x.Date, "{0:yyyy-MM-dd}", new { @class = "form-control",@type = "date"})
                        @Html.ValidationMessageFor(x => x.Date, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Number)</label>
                        @Html.EditorFor(x => x.Number, new { htmlAttributes = new { @class = "form-control", @disable = "disable" }})
                        @Html.ValidationMessageFor(x => x.Number, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.OrderTypeId)</label>
                        @Html.DropDownListFor(x => x.OrderTypeId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "orderTypeDropdown" })
                        @Html.ValidationMessageFor(x => x.OrderTypeId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1 form-group"></div>
                    <div class="col-md-3 form-group">
                        <br />
                        <div class="row">
                            <button type="submit" class="btn btn-success mb-3 mr-3">
                                <i class="far fa-calendar-plus"></i> <span> Создать приказ</span>
                            </button>
@*                            <button type="submit" class="btn btn-info mb-3" onclick="cancelImportStudents()">
                                <i class="fas fa-reply-all"></i> <span> Отменить</span>
                            </button>*@
                        </div>
                    </div>
                    <div class="col-md-5 form-group">
                        <label>@Html.DisplayNameFor(x => x.Note)</label>
                        @Html.TextAreaFor(x => x.Note, new { @class = "form-control", rows = "4"})
                        @Html.ValidationMessageFor(x => x.Note, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </form>
}



@section Scripts {
    <script>
        $(document).ready(function () {
            loadDropdownData();

            $('#facultyFromDropdown, #academYearFirstDropdown').change(function () {
                FillGroupFromDropdownAfterChange();
            });

            $('#facultyToDropdown, #academYearSecondDropdown').change(function () {
                FillGroupToDropdownAfterChange();
            });

            $('#movementTypeDropdown').change(function () {
                FillGroupFromDropdownAfterChange();
                FillGroupToDropdownAfterChange();
                FillOrderTypeDropdown();
                HandleMovementTypeChange();
                
            });

            $('#groupFromDropdown').change(function () {
                GetLeftStudentList();
                saveSelectedValue('groupFromDropdown')
            });

            $('#groupToDropdown').change(function () {
                GetRightStudentList();
                saveSelectedValue('groupToDropdown')
            });
        });

        function loadDropdownData() {
            var dropdownPromises = [];

            dropdownPromises.push(
                $.ajax({
                    url: '@Url.Action("GetFaculties", "Faculty")',
                    type: 'GET'
                }).done(function (data) {
                    populateDropdown(data, 'facultyFromDropdown');
                    populateDropdown(data, 'facultyToDropdown');
                    loadSelectedValue('facultyFromDropdown');
                    loadSelectedValue('facultyToDropdown');
                }).fail(function (xhr, status, error) {
                    console.error(xhr.responseText);
                })
            );

            dropdownPromises.push(
                $.ajax({
                    url: '@Url.Action("GetAcademicYears", "Option")',
                    type: 'GET'
                }).done(function (data) {
                    populateDropdown(data, 'academYearFirstDropdown');
                    populateDropdown(data, 'academYearSecondDropdown');
                    loadSelectedValue('academYearFirstDropdown');
                    loadSelectedValue('academYearSecondDropdown');
                }).fail(function (xhr, status, error) {
                    console.error(xhr.responseText);
                })
            );

            dropdownPromises.push(
                $.ajax({
                    url: '@Url.Action("GetMovementTypes", "Option")',
                    type: 'GET'
                }).done(function (data) {
                    populateDropdown(data, 'movementTypeDropdown');
                    loadSelectedValue('movementTypeDropdown');
                }).fail(function (xhr, status, error) {
                    console.error(xhr.responseText);
                })
            );

            // After all dropdowns are populated, execute the remaining functions
            $.when.apply($, dropdownPromises).done(function () {
                FillGroupFromDropdownAfterLoad();
                FillGroupToDropdownAfterLoad();
                FillOrderTypeDropdown();
                HandleMovementTypeChange();
            });
        }

        function populateDropdown(data, dropdownId) {
            var dropdown = $('#' + dropdownId);
            dropdown.empty();

            if (data.length === 0) {
                dropdown.append($('<option>').text('Нет данных').val(''));
            } else {
                $.each(data, function (i, item) {
                    dropdown.append($('<option></option>').val(item.value).text(item.text));
                });
            }
        }

        function FillGroupFromDropdownAfterChange() {
            var facultyId = $('#facultyFromDropdown').val();
            var movementTypeId = $('#movementTypeDropdown').val();
            var academicYearId = $('#academYearFirstDropdown').val();

            // Create a promise for the AJAX request
            var ajaxPromise = new Promise(function (resolve, reject) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetGroupsToExport", "Group")',
                    contentType: 'application/json',
                    data: {
                        'facultyId': facultyId,
                        'movementTypeId': movementTypeId,
                        'academicYearId': academicYearId
                    },
                    success: function (data) {
                        populateDropdown(data, 'groupFromDropdown');
                        saveSelectedValue('facultyFromDropdown');
                        saveSelectedValue('movementTypeDropdown');
                        saveSelectedValue('academYearFirstDropdown');
                        saveSelectedValue('groupFromDropdown');
                        resolve(); // Resolve the promise when the AJAX request is successful
                    },
                    error: function (xhr, status, error) {
                        alert(xhr.responseText);
                        reject(); // Reject the promise if there's an error
                    }
                });
            });

            // Execute the GetLeftStudentList function after FillGroupFromDropdownAfterLoad is completed
            ajaxPromise.then(function () {
                GetLeftStudentList();
            }).catch(function () {
                alert('Произошла ошибка!')
            });
        }

        function FillGroupToDropdownAfterChange() {
            var facultyId = $('#facultyToDropdown').val();
            var movementTypeId = $('#movementTypeDropdown').val();
            var academicYearId = $('#academYearSecondDropdown').val();

            var ajaxPromise = new Promise(function (resolve, reject) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetGroupsToImport", "Group")',
                    contentType: 'application/json',
                    data: {
                        'facultyId': facultyId,
                        'movementTypeId': movementTypeId,
                        'academicYearId': academicYearId
                    },
                    success: function (data) {
                        populateDropdown(data, 'groupToDropdown');
                        saveSelectedValue('facultyToDropdown');
                        saveSelectedValue('movementTypeDropdown');
                        saveSelectedValue('academYearSecondDropdown');
                        saveSelectedValue('groupToDropdown');
                        resolve();
                    },
                    error: function (xhr, status, error) {
                        console.error(xhr.responseText);
                        reject();
                    }
                });
            });


            ajaxPromise.then(function () {
                GetRightStudentList();
            }).catch(function () {
                alert('Произошла ошибка!')
            });
        }

        function FillGroupFromDropdownAfterLoad() {
            var facultyId = $('#facultyFromDropdown').val();
            var movementTypeId = $('#movementTypeDropdown').val();
            var academicYearId = $('#academYearFirstDropdown').val();

            // Create a promise for the AJAX request
            var ajaxPromise = new Promise(function (resolve, reject) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetGroupsToExport", "Group")',
                    contentType: 'application/json',
                    data: {
                        'facultyId': facultyId,
                        'movementTypeId': movementTypeId,
                        'academicYearId': academicYearId
                    },
                    success: function (data) {
                        populateDropdown(data, 'groupFromDropdown');
                        loadSelectedValue('groupFromDropdown');
                        saveSelectedValue('facultyFromDropdown');
                        saveSelectedValue('movementTypeDropdown');
                        saveSelectedValue('academYearFirstDropdown');
                        saveSelectedValue('groupFromDropdown');

                        resolve(); // Resolve the promise when the AJAX request is successful
                    },
                    error: function (xhr, status, error) {
                        alert(xhr.responseText);
                        reject(); // Reject the promise if there's an error
                    }
                });
            });

            // Execute the GetLeftStudentList function after FillGroupFromDropdownAfterLoad is completed
            ajaxPromise.then(function () {
                GetLeftStudentList();
            }).catch(function () {
                alert('Произошла ошибка!')
            });
        }

        function FillGroupToDropdownAfterLoad() {
            var facultyId = $('#facultyToDropdown').val();
            var movementTypeId = $('#movementTypeDropdown').val();
            var academicYearId = $('#academYearSecondDropdown').val();

            var ajaxPromise = new Promise(function (resolve, reject) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetGroupsToImport", "Group")',
                    contentType: 'application/json',
                    data: {
                        'facultyId': facultyId,
                        'movementTypeId': movementTypeId,
                        'academicYearId': academicYearId
                    },
                    success: function (data) {
                        populateDropdown(data, 'groupToDropdown');
                        loadSelectedValue('groupToDropdown');
                        saveSelectedValue('facultyToDropdown');
                        saveSelectedValue('movementTypeDropdown');
                        saveSelectedValue('academYearSecondDropdown');
                        saveSelectedValue('groupToDropdown');

                        resolve(); 
                    },
                    error: function (xhr, status, error) {
                        console.error(xhr.responseText);
                        reject();
                    }
                });
            });


            ajaxPromise.then(function () {
                GetRightStudentList();
            }).catch(function () {
                alert('Произошла ошибка!')
            });
        }


        function FillOrderTypeDropdown() {
            var movementTypeId = $('#movementTypeDropdown').val();

            $.ajax({
                type: 'GET',
                url: '@Url.Action("GetOrderTypeByMovement", "Option")',
                contentType: 'application/json',
                data: {
                    'movementTypeId': movementTypeId
                },
                success: function (data) {
                    populateDropdown(data, 'orderTypeDropdown');
                    saveSelectedValue('orderTypeDropdown');
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });
        }

        function HandleMovementTypeChange() {
            // Add an event listener to the MovementTypeId dropdown
            var movementTypeValue = $('#movementTypeDropdown').val();
            // Check if the selected value is 3 (assuming it's an integer)
            if (movementTypeValue === "3") {
                // Hide the groupToDropdown, academYearSecondDropdown, and RightContainer
                document.getElementById("groupToDropdown").style.display = "none";
                document.getElementById("groupToDropdownId").style.display = "none";
                document.getElementById("facultyToDropdown").style.display = "none";
                document.getElementById("RightContainer").style.display = "none";
                document.getElementById("facultiesLbl").style.display = "none";
            } else {
                // Show the groupToDropdown, academYearSecondDropdown, and RightContainer
                document.getElementById("groupToDropdown").style.display = "block";
                document.getElementById("groupToDropdownId").style.display = "block";
                document.getElementById("facultyToDropdown").style.display = "block";
                document.getElementById("RightContainer").style.display = "block";
                document.getElementById("facultiesLbl").style.display = "block";
            }

            //var movementTypeId = $('#movementTypeDropdown').val();
            //var academYearFirstDropdown = $('#academYearFirstDropdown');
            ////var academYearSecondDropdown = $('#academYearSecondDropdown');
            ////var groupFromDropdown = $('#groupFromDropdown');
            //var groupToDropdown = $('#groupToDropdown');

            //if (movementTypeId === "3") {
            //    var nextIndex = academYearFirstDropdown.prop('selectedIndex') - 1;
            //    var nextValue = academYearFirstDropdown.find('option').eq(nextIndex).val();

            //    if (nextIndex >= 0 && nextValue) {

            //        $("#facultyToDropdown").prop("visible", true);
            //        $("#groupToDropdown").prop("visible", true);

            //        //$("#academYearSecondDropdown").empty();
            //        //$("#groupToDropdown").empty();

            //        //groupToDropdown.append($('<option>').text(groupFromDropdown.find('option:selected').text()).val(groupFromDropdown.val())).prop("disabled", true);
            //        //academYearSecondDropdown.append($('<option>').text(academYearFirstDropdown.find('option').eq(nextIndex).text()).val(nextValue)).prop("disabled", true);

            //        ////groupToDropdown.val(groupFromDropdown.val())).prop("disabled", true);
            //        ////academYearSecondDropdown.val(nextValue)).prop("disabled", true);
            //    }
            //    else{
            //        alert('Чтобы перевести группу на следующий курс, добавьте следующий учебный год в настройках.');
            //    }

            //} else {
            //    $("#facultyToDropdown").prop("visible", false);
            //    $("#groupToDropdown").prop("visible", false);
            //}
        }

        function loadSelectedValue(dropdownId) {
            //var selectedValue = localStorage.getItem(dropdownId);
            //if (selectedValue) {
            //    $('#' + dropdownId).val(selectedValue);
            //}

            var dropdown = document.getElementById(dropdownId);
            var selectedValue = localStorage.getItem(dropdownId);

            // Check if the selectedValue exists in the dropdown
            if (selectedValue && Array.from(dropdown.options).some(option => option.value === selectedValue)) {
                $('#' + dropdownId).val(selectedValue);
            }
        }

        function saveSelectedValue(dropdownId) {
            var selectedValue = $('#' + dropdownId).val();
            localStorage.setItem(dropdownId, selectedValue);
        }

        function GetLeftStudentList() {
            var groupId = $('#groupFromDropdown').val();

            $.ajax({
                type: 'GET',
                url: '@Url.Action("ExportStudentList", "Student")',
                contentType: 'application/json',
                data: {
                    'groupId': groupId
                },
                success: function (response) {
                    $('#LeftContainer').html(response);
                    $('#exportTable').DataTable();
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });
        }

        function GetRightStudentList() {
            var groupId = $('#groupToDropdown').val();

            $.ajax({
                type: 'GET',
                url: '@Url.Action("ImportStudentList", "Student")',
                contentType: 'application/json',
                data: {
                    'groupId': groupId
                },
                success: function (response) {
                    $('#RightContainer').html(response);
                    $('#importTable').DataTable();
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });
        }
    </script>
}