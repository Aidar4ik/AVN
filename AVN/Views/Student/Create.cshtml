@model StudentVM
@using AVN.Common.Enums
@{
    ViewBag.Title = "Регистрация";
}


@using (Html.BeginForm())
{

    <div class="container mt-3">
        <form>
            <div class="row jumbotron box8">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="col-sm-12 mx-t3 mb-4">
                    <h2 class="text-center text-info">Создание нового абитуриента</h2>
                </div>
                @*start-first-row*@
                <div class="col-sm-3 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.SName)</label>
                    @Html.EditorFor(x => x.SName, new { htmlAttributes = new { @class = "form-control", placeholder="Введите вашу фамилию." }})
                    @Html.ValidationMessageFor(x => x.SName, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-3 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Name)</label>
                    @Html.EditorFor(x => x.Name, new { htmlAttributes = new { @class = "form-control", placeholder="Введите ваше имя." }})
                    @Html.ValidationMessageFor(x => x.Name, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-3 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.PName)</label>
                    @Html.EditorFor(x => x.PName, new { htmlAttributes = new { @class = "form-control", placeholder="Введите ваше отчество." }})
                    @Html.ValidationMessageFor(x => x.PName, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-2 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.DateOfBirth)</label>
                    @Html.EditorFor(x => x.DateOfBirth, new { htmlAttributes = new { @class = "form-control datetimepicker" }})
                    @Html.ValidationMessageFor(x => x.DateOfBirth, "", new { @class = "text-danger" })
                </div>

                @*end-first-row*@

                @*start-second-row*@
                <div class="col-sm-3 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Gender):</label>
                    <div class="radio-buttons">
                        <div class="form-check form-check-inline">
                            <label class="form-check-label" style="margin-right: 5px;">@Gender.Male.GetShortName()</label>
                            @Html.RadioButtonFor(m => m.Gender, Gender.Male, new { @class = "form-check-input" })
                        </div>
                        <div class="form-check form-check-inline">
                            <label class="form-check-label" style="margin-right: 5px;">@Gender.Female.GetShortName()</label>
                            @Html.RadioButtonFor(m => m.Gender, Gender.Female, new { @class = "form-check-input" })
                        </div>
                        <div class="form-check form-check-inline">
                            <label class="form-check-label" style="margin-right: 5px;">@Gender.Undefined.GetShortName()</label>
                            @Html.RadioButtonFor(m => m.Gender, Gender.Undefined, new { @class = "form-check-input"})
                        </div>
                    </div>
                    @Html.ValidationMessageFor(x => x.Gender, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Address)</label>
                    @Html.EditorFor(x => x.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Введите ваш адрес." }})
                    @Html.ValidationMessageFor(x => x.Address, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-2 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Citizenship)</label>
                    @Html.DropDownListFor(x => x.Citizenship, Html.GetEnumSelectList(typeof(Citizenship)), "Не выбрано", new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.Citizenship, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-2 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.PhoneNumber)</label>
                    @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "form-control phone", placeholder = "0(999)99-99-99" })
                    @Html.ValidationMessageFor(x => x.PhoneNumber, "", new { @class = "text-danger" })
                </div>
                @*end-second-row*@

                @*start-third-row*@
                <div class="col-sm-2 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.EducationalLine)</label>
                    @Html.DropDownListFor(x => x.EducationalLine, Html.GetEnumSelectList(typeof(EducationalLine)), "Не выбрано", new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.EducationalLine, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-2 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.RecruitmentYear)</label>
                    @Html.EditorFor(x => x.RecruitmentYear, new { htmlAttributes = new { @class = "form-control" }})
                    @Html.ValidationMessageFor(x => x.RecruitmentYear, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-3 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.GradeBookNumber)</label>
                    @Html.EditorFor(x => x.GradeBookNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(x => x.GradeBookNumber, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-3 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Status)</label>
                    @Html.DropDownListFor(x => x.Status, Html.GetEnumSelectList(typeof(StudentStatus)), new {@class = "form-control", disabled = "disabled" })
                    @Html.HiddenFor(x => x.Status, new { id = "StatusHidden" })
                    @Html.ValidationMessageFor(x => x.Status, "", new { @class = "text-danger" })
                </div>

                @*end-third-row*@

                @*start-last-row*@
                <div class="col-sm-6 form-group">
                    <div class="col-sm-12 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.FacultyId)</label>
                        @Html.DropDownListFor(x => x.FacultyId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "facultiesDropdown" })
                        @Html.ValidationMessageFor(x => x.FacultyId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-12 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.DepartmentId)</label>
                        @Html.DropDownListFor(x => x.DepartmentId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "departmentsDropdown" })
                        @Html.ValidationMessageFor(x => x.DepartmentId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-12 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.DirectionId)</label>
                        @Html.DropDownListFor(x => x.DirectionId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "directionsDropdown" })
                        @Html.ValidationMessageFor(x => x.DirectionId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-12 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.GroupId)</label>
                        @Html.DropDownListFor(x => x.GroupId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "groupsDropdown" })
                        @Html.ValidationMessageFor(x => x.GroupId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-6 form-group">
                    <div class="col-sm-12 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Login)</label>
                        @Html.EditorFor(x => x.Login, new { htmlAttributes = new { @class = "form-control"}})
                        @Html.ValidationMessageFor(x => x.Login, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-12 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Password)</label>
                        @Html.EditorFor(x => x.Password, new { htmlAttributes = new { @class = "form-control"}})
                        @Html.ValidationMessageFor(x => x.Password, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-12 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.ConfirmPassword)</label>
                        @Html.EditorFor(x => x.ConfirmPassword, new { htmlAttributes = new { @class = "form-control"}})
                        @Html.ValidationMessageFor(x => x.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                   @* <div class="col-sm-12 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Password)</label>
                        @Html.PasswordFor(x => x.Password, new { @class = "form-control", placeholder="Введите пароль." })
                        @Html.ValidationMessageFor(x => x.Password, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-12 form-group">
                        <label class="font-weight-bold">@Html.DisplayNameFor(x => x.ConfirmPassword)</label>
                        @Html.PasswordFor(x => x.ConfirmPassword, new { @class = "form-control", placeholder="Повторите пароль." })
                        @Html.ValidationMessageFor(x => x.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>*@
                </div>
                
                @*end-last-row*@

                <div class="col-sm-12 row">
                    <div class="col-sm-9"></div>
                    <div class="col-sm-3">
                        <a href="/Student/Enrolled" class="btn btn-secondary btn-lg btn-block-inline" type="button">Назад</a>
                        <button class="btn btn-success btn-lg btn-block-inline" type="submit">Добавить</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
}




@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $(".phone").mask("0(999)99-99-99");

            // Fetch initial data
            fetchData();
        });

        function fetchData() {
            $.ajax({
                url: '@Url.Action("GetFaculties", "Faculty")',
                type: 'GET'
            })
                .then(function (data) {
                    populateDropdown(data, '#facultiesDropdown');
                    return '@Model.FacultyId'; // Assuming FacultyId is an integer property
                })
                .then(function (facultyId) {
                    $('#facultiesDropdown').val(facultyId);
                    return fetchDataByFacultyId(facultyId, '#departmentsDropdown', '@Url.Action("GetDepartmentsByFaculty", "Department")');
                })
                .then(function (departmentId) {
                    $('#departmentsDropdown').val(departmentId);
                    return fetchDataByDepartmentId(departmentId, '#directionsDropdown', '@Url.Action("GetDirectionsByDepartment", "Direction")');
                })
                .then(function (directionId) {
                    $('#directionsDropdown').val(directionId);
                    return fetchDataByDirectionId(directionId, '#groupsDropdown', '@Url.Action("GetEnrolledGroupsByDirection", "Group")');
                })
                .then(function (groupId) {
                    $('#groupsDropdown').val(groupId);
                })
                .catch(function (error) {
                    console.error(error);
                });
        }

        function fetchDataByFacultyId(facultyId, dropdownSelector, url) {
            if (!facultyId) {
                clearDropdowns('#departmentsDropdown');
                clearDropdowns('#directionsDropdown');
                clearDropdowns('#groupsDropdown');
                return Promise.resolve('');
            }

            return $.ajax({
                type: 'GET',
                url: url,
                data: { facultyId: facultyId }
            })
                .then(function (response) {
                    populateDropdown(response, dropdownSelector);
                    return '@Model.DepartmentId';
                });
        }

        function fetchDataByDepartmentId(departmentId, dropdownSelector, url) {
            if (!departmentId) {
                clearDropdowns('#directionsDropdown');
                clearDropdowns('#groupsDropdown');
                return Promise.resolve('');
            }

            return $.ajax({
                type: 'GET',
                url: url,
                data: { departmentId: departmentId }
            })
                .then(function (response) {
                    populateDropdown(response, dropdownSelector);
                    return '@Model.DirectionId';
                });
        }

        function fetchDataByDirectionId(directionId, dropdownSelector, url) {
            if (!directionId) {
                clearDropdowns(dropdownSelector);
                return Promise.resolve('');
            }

            return $.ajax({
                type: 'GET',
                url: url,
                data: { directionId: directionId }
            })
                .then(function (response) {
                    populateDropdown(response, dropdownSelector);
                    return '@Model.GroupId';
                });
        }

        function populateDropdown(data, dropdownSelector) {
            var dropdown = $(dropdownSelector);
            dropdown.empty();
            dropdown.append($('<option>').text('Не выбрано').val(''));

            $.each(data, function (i, item) {
                dropdown.append($('<option></option>').val(item.value).text(item.text));
            });
        }

        function clearDropdowns(dropdownSelector) {
            var dropdown = $(dropdownSelector);
            dropdown.empty();
            dropdown.append($('<option>').text('Не выбрано').val(''));
        }

        $(document).on('change', '#facultiesDropdown', function () {
            var facultyId = $(this).val();
            fetchDataByFacultyId(facultyId, '#departmentsDropdown', '@Url.Action("GetDepartmentsByFaculty", "Department")');
        });

        $(document).on('change', '#departmentsDropdown', function () {
            var departmentId = $(this).val();
            fetchDataByDepartmentId(departmentId, '#directionsDropdown', '@Url.Action("GetDirectionsByDepartment", "Direction")');
        });

        $(document).on('change', '#directionsDropdown', function () {
            var directionId = $(this).val();
            fetchDataByDirectionId(directionId, '#groupsDropdown', '@Url.Action("GetEnrolledGroupsByDirection", "Group")');
        });
    </script>
}