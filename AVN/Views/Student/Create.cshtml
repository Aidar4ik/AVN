@model StudentVM
@using AVN.Common.Enums
@{
    ViewBag.Title = "Регистрация";
}

@using (Html.BeginForm())
{
    <div class="container py-3">
        <div class="row">
            <div class="col-md-12">
                <h2 class="text-center mb-2">Регистрация студента</h2>
                <hr class="mb-4">

                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <span class="anchor" id="formPayment"></span>
                        <div class="card card-outline-secondary">
                            <div class="card-body">
                                <h3 class="text-center">Форма регистрации</h3>
                                <hr>
                                <form autocomplete="off" class="form" role="form">
                                    @Html.AntiForgeryToken()
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.FullName)</label>
                                        @Html.EditorFor(x => x.FullName, new { htmlAttributes = new { @class = "form-control" }})
                                        @Html.ValidationMessageFor(x => x.FullName, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.DateOfBirth)</label>
                                        @Html.EditorFor(x => x.DateOfBirth, new { htmlAttributes = new { @class = "form-control datetimepicker" }})
                                        @Html.ValidationMessageFor(x => x.DateOfBirth, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.Gender)</label>
                                        <div class="radio-buttons">
                                            <div class="form-check form-check-inline">
                                                <label class="form-check-label" style="margin-right: 5px;">@Gender.Male.GetShortName()</label>
                                                @Html.RadioButtonFor(m => m.Gender, Gender.Male, new { @class = "form-check-input" })
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <label class="form-check-label" style="margin-right: 5px;">@Gender.Female.GetShortName()</label>
                                                @Html.RadioButtonFor(m => m.Gender, Gender.Female, new { @class = "form-check-input" })
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <label class="form-check-label" style="margin-right: 5px;">@Gender.Undefined.GetShortName()</label>
                                                @Html.RadioButtonFor(m => m.Gender, Gender.Undefined, new { @class = "form-check-input"})
                                            </div>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.Gender, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.Address)</label>
                                        @Html.EditorFor(x => x.Address, new { htmlAttributes = new { @class = "form-control" }})
                                        @Html.ValidationMessageFor(x => x.Address, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.PhoneNumber)</label>
                                        @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "form-control phone", placeholder = "0(999)99-99-99" })
                                        @Html.ValidationMessageFor(x => x.PhoneNumber, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.StudingForm)</label>
                                        @Html.DropDownListFor(x => x.StudingForm, Html.GetEnumSelectList(typeof(FormOfEducation)), "Не выбрано", new {@class = "form-control"})
                                        @Html.ValidationMessageFor(x => x.StudingForm, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.EducationalLine)</label>
                                        @Html.DropDownListFor(x => x.EducationalLine, Html.GetEnumSelectList(typeof(EducationalLine)), "Не выбрано", new {@class = "form-control"})
                                        @Html.ValidationMessageFor(x => x.EducationalLine, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.AcademicDegree)</label>
                                        @Html.DropDownListFor(x => x.AcademicDegree, Html.GetEnumSelectList(typeof(AcademicDegree)), "Не выбрано", new {@class = "form-control"})
                                        @Html.ValidationMessageFor(x => x.AcademicDegree, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.Citizenship)</label>
                                        @Html.DropDownListFor(x => x.Citizenship, Html.GetEnumSelectList(typeof(Citizenship)), "Не выбрано", new {@class = "form-control"})
                                        @Html.ValidationMessageFor(x => x.Citizenship, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.FacultyId)</label>
                                        @Html.DropDownListFor(x => x.FacultyId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "facultiesDropdown" })
                                        @Html.ValidationMessageFor(x => x.FacultyId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.DepartmentId)</label>
                                        @Html.DropDownListFor(x => x.DepartmentId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "departmentsDropdown" })
                                        @Html.ValidationMessageFor(x => x.DepartmentId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.DirectionId)</label>
                                        @Html.DropDownListFor(x => x.DirectionId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "directionsDropdown" })
                                        @Html.ValidationMessageFor(x => x.DirectionId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label>@Html.DisplayNameFor(x => x.GroupId)</label>
                                        @Html.DropDownListFor(x => x.GroupId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "groupsDropdown" })
                                        @Html.ValidationMessageFor(x => x.GroupId, "", new { @class = "text-danger" })
                                    </div>



                                    <hr>
                                    <div class="form-group row">
                                        <div class="col-md-6">
                                            <a href="/Student/Index" class="btn btn-secondary btn-lg btn-block" type="button">Отмена</a>
                                        </div>
                                        <div class="col-md-6">
                                            <button class="btn btn-success btn-lg btn-block" type="submit">Добавить</button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div><!-- /form card cc payment -->
                    </div>
                </div><!--/row-->
            </div><!--/col-->
        </div><!--/row-->
    </div>
    <!--/container-->
}

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $(".phone").mask("0(999)99-99-99");
        });
    </script>

    <script>
           
        
        $(document).ready(function () {
            $.ajax({
                url: '@Url.Action("GetFaculties", "Faculty")',
                type: 'GET',
                success: function (data) {
                    // Clear previous options
                    //$('#facultiesDropdown').empty();

                    // Add new options
                    $.each(data, function (i, faculty) {
                        $('#facultiesDropdown').append($('<option></option>').val(faculty.value).text(faculty.text));
                    });

                },
                error: function (xhr, status, error) {
                    // Handle error if any
                    console.error(xhr.responseText);
                }
            });
        });

        $(document).ready(function () {
            $('#facultiesDropdown').change(function () {
                var facultyId = $(this).val();
                if (!facultyId) {
                    // Clear departments dropdown
                    $('#departmentsDropdown').empty();
                    $('#directionsDropdown').empty();
                    $('#groupsDropdown').empty();

                    // Add "select item" option
                    $('#departmentsDropdown').append($('<option>').text('Не выбрано').val(''));
                    $('#directionsDropdown').append($('<option>').text('Не выбрано').val(''));
                    $('#groupsDropdown').append($('<option>').text('Не выбрано').val(''));
                    return; // Exit the function
                }

                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetDepartmentsByFaculty", "Department")',
                    data: { facultyId: facultyId },
                    success: function (response) {
                        // Clear previous options
                        $('#departmentsDropdown').empty();

                        // Add "select item" option
                        $('#departmentsDropdown').append($('<option>').text('Не выбрано').val(''));

                        // Add new options
                        $.each(response, function (i, department) {
                            $('#departmentsDropdown').append($('<option></option>').val(department.value).text(department.text));
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error if any
                        console.error(xhr.responseText);
                    }
                });
            });
        });

        $(document).ready(function () {
            $('#departmentsDropdown').change(function () {
                var departmentId = $(this).val();
                if (!departmentId) {
                    // Clear departments dropdown
                    $('#directionsDropdown').empty();
                    $('#groupsDropdown').empty();

                    // Add "select item" option
                    $('#directionsDropdown').append($('<option>').text('Не выбрано').val(''));
                    $('#groupsDropdown').append($('<option>').text('Не выбрано').val(''));
                    return; // Exit the function
                }

                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetDirectionsByDepartment", "Direction")',
                    data: { departmentId: departmentId },
                    success: function (response) {
                        // Clear previous options
                        $('#directionsDropdown').empty();

                        // Add "select item" option
                        $('#directionsDropdown').append($('<option>').text('Не выбрано').val(''));

                        // Add new options
                        $.each(response, function (i, direction) {
                            $('#directionsDropdown').append($('<option></option>').val(direction.value).text(direction.text));
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error if any
                        console.error(xhr.responseText);
                    }
                });
            });
        });

        $(document).ready(function () {
            $('#directionsDropdown').change(function () {
                var directionId = $(this).val();

                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetGroupsByDirection", "Group")',
                    data: { directionId: directionId },
                    success: function (response) {
                        // Clear previous options
                        $('#groupsDropdown').empty();

                        // Add "select item" option
                        $('#groupsDropdown').append($('<option>').text('Не выбрано').val(''));

                        // Add new options
                        $.each(response, function (i, group) {
                            $('#groupsDropdown').append($('<option></option>').val(group.value).text(group.text));
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error if any
                        console.error(xhr.responseText);
                    }
                });
            });
        });
    </script>
}