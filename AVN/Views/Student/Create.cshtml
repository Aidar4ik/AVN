@model StudentVM
@using AVN.Common.Enums
@{
    ViewBag.Title = "Регистрация";
}
<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="main-tab" data-toggle="tab" href="#main" role="tab" aria-controls="main"
           aria-selected="true">Основные данные</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="history-tab" data-toggle="tab" href="#history" role="tab" aria-controls="history"
           aria-selected="false">История перемещений</a>
    </li>
</ul>
<div class="tab-content" id="myTabContent">

    <div class="tab-panel fade show active" id="main" role="tabpanel" aria-labelledby="main-tab">
        @using (Html.BeginForm())
        {

            <div class="container mt-3">
                <form>
                    <div class="row jumbotron box8">
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="col-sm-12 mx-t3 mb-4">
                            <h2 class="text-center text-info">Создание нового абитуриента</h2>
                        </div>
                        @*start-first-row*@
                        <div class="col-sm-3 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.SName)</label>
                            @Html.EditorFor(x => x.SName, new { htmlAttributes = new { @class = "form-control", placeholder="Введите вашу фамилию." }})
                            @Html.ValidationMessageFor(x => x.SName, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Name)</label>
                            @Html.EditorFor(x => x.Name, new { htmlAttributes = new { @class = "form-control", placeholder="Введите ваше имя." }})
                            @Html.ValidationMessageFor(x => x.Name, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.PName)</label>
                            @Html.EditorFor(x => x.PName, new { htmlAttributes = new { @class = "form-control", placeholder="Введите ваше отчество." }})
                            @Html.ValidationMessageFor(x => x.PName, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-2 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.DateOfBirth)</label>
                            @Html.EditorFor(x => x.DateOfBirth, new { htmlAttributes = new { @class = "form-control datetimepicker" }})
                            @Html.ValidationMessageFor(x => x.DateOfBirth, "", new { @class = "text-danger" })
                        </div>

                        @*end-first-row*@

                        @*start-second-row*@
                        <div class="col-sm-3 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Gender):</label>
                            <div class="radio-buttons">
                                <div class="form-check form-check-inline">
                                    <label class="form-check-label" style="margin-right: 5px;">@Gender.Male.GetShortName()</label>
                                    @Html.RadioButtonFor(m => m.Gender, Gender.Male, new { @class = "form-check-input" })
                                </div>
                                <div class="form-check form-check-inline">
                                    <label class="form-check-label" style="margin-right: 5px;">@Gender.Female.GetShortName()</label>
                                    @Html.RadioButtonFor(m => m.Gender, Gender.Female, new { @class = "form-check-input" })
                                </div>
                                <div class="form-check form-check-inline">
                                    <label class="form-check-label" style="margin-right: 5px;">@Gender.Undefined.GetShortName()</label>
                                    @Html.RadioButtonFor(m => m.Gender, Gender.Undefined, new { @class = "form-check-input"})
                                </div>
                            </div>
                            @Html.ValidationMessageFor(x => x.Gender, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-4 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Address)</label>
                            @Html.EditorFor(x => x.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Введите ваш адрес." }})
                            @Html.ValidationMessageFor(x => x.Address, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-2 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Citizenship)</label>
                            @Html.DropDownListFor(x => x.Citizenship, Html.GetEnumSelectList(typeof(Citizenship)), "Не выбрано", new {@class = "form-control"})
                            @Html.ValidationMessageFor(x => x.Citizenship, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-2 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.PhoneNumber)</label>
                            @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "form-control phone", placeholder = "0(999)99-99-99" })
                            @Html.ValidationMessageFor(x => x.PhoneNumber, "", new { @class = "text-danger" })
                        </div>
                        @*end-second-row*@

                        @*start-third-row*@
                        <div class="col-sm-2 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.EducationalLine)</label>
                            @Html.DropDownListFor(x => x.EducationalLine, Html.GetEnumSelectList(typeof(EducationalLine)), "Не выбрано", new {@class = "form-control"})
                            @Html.ValidationMessageFor(x => x.EducationalLine, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-2 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.RecruitmentYear)</label>
                            @Html.EditorFor(x => x.RecruitmentYear, new { htmlAttributes = new { @class = "form-control" }})
                            @Html.ValidationMessageFor(x => x.RecruitmentYear, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.GradeBookNumber)</label>
                            @Html.EditorFor(x => x.GradeBookNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"}})
                            @Html.ValidationMessageFor(x => x.GradeBookNumber, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Status)</label>
                            @Html.DropDownListFor(x => x.Status, Html.GetEnumSelectList(typeof(StudentStatus)), new {@class = "form-control", disabled = "disabled" })
                            @Html.HiddenFor(x => x.Status, new { id = "StatusHidden" })
                            @Html.ValidationMessageFor(x => x.Status, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <div class="col-sm-1">
                                <label class="font-weight-bold">@Html.DisplayNameFor(x => x.IsHasDebt)</label>
                                @Html.CheckBoxFor(x => x.IsHasDebt, new { htmlAttributes = new { @class = "form-control" }})
                                @Html.ValidationMessageFor(x => x.IsHasDebt, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @*end-third-row*@

                        @*start-last-row*@
                        <div class="col-sm-5 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.FacultyId)</label>
                            @Html.DropDownListFor(x => x.FacultyId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "facultiesDropdown" })
                            @Html.ValidationMessageFor(x => x.FacultyId, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3 form-group"></div>
                        <div class="col-sm-4 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Login)</label>
                            @Html.EditorFor(x => x.Login, new { htmlAttributes = new { @class = "form-control"}})
                            @Html.ValidationMessageFor(x => x.Login, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-5 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.DepartmentId)</label>
                            @Html.DropDownListFor(x => x.DepartmentId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "departmentsDropdown" })
                            @Html.ValidationMessageFor(x => x.DepartmentId, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3 form-group"></div>
                        <div class="col-sm-4 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Password)</label>
                            @Html.PasswordFor(x => x.Password, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.Password, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-5 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.DirectionId)</label>
                            @Html.DropDownListFor(x => x.DirectionId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "directionsDropdown" })
                            @Html.ValidationMessageFor(x => x.DirectionId, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3 form-group"></div>
                        <div class="col-sm-4 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.ConfirmPassword)</label>
                            @Html.PasswordFor(x => x.ConfirmPassword, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-5 form-group">
                            <label class="font-weight-bold">@Html.DisplayNameFor(x => x.GroupId)</label>
                            @Html.DropDownListFor(x => x.GroupId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "groupsDropdown" })
                            @Html.ValidationMessageFor(x => x.GroupId, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3 form-group"></div>
                        <div class="col-sm-4 form-group">
                            <label></label>
                            <a asp-controller="StudentPayment" asp-action="Index" asp-route-id="@Model.Id" class="btn btn-primary btn-m btn-block" type="button">Контракт</a>
                        </div>
                        @*end-last-row*@

                        <div class="col-sm-12 row">
                            <div class="col-sm-9"></div>
                            <div class="col-sm-3">
                                <a href="/Student/Enrolled" class="btn btn-secondary btn-lg btn-block-inline" type="button">Назад</a>
                                <button class="btn btn-success btn-lg btn-block-inline" type="submit">Добавить</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        }

    </div>

    <div class="tab-panel fade" id="history" role="tabpanel" aria-labelledby="history-tab">
        @*create partial view*@
    </div>
</div>



@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $(".phone").mask("0(999)99-99-99");
        });
    </script>

    <script>
        $(function () {
            var selectedValue = $("#Status").val();
            $("#StatusHidden").val(selectedValue);
        });

        $(document).ready(function () {
            $.ajax({
                url: '@Url.Action("GetFaculties", "Faculty")',
                type: 'GET',
                success: function (data) {
                    // Clear previous options
                    //$('#facultiesDropdown').empty();

                    // Add new options
                    $.each(data, function (i, faculty) {
                        $('#facultiesDropdown').append($('<option></option>').val(faculty.value).text(faculty.text));
                    });
                    var facultyId = '@Model.FacultyId'; // Assuming FacultyId is an integer property
                    $('#facultiesDropdown').val(facultyId);
                    FillDepartmentsDropdown();
                },
                error: function (xhr, status, error) {
                    // Handle error if any
                    console.error(xhr.responseText);
                }
            });
        });

        function FillDepartmentsDropdown() {
            // Your code logic here
            var facultyId = $('#facultiesDropdown').val();
            $.ajax({
                url: '@Url.Action("GetDepartmentsByFaculty", "Department")',
                type: 'GET',
                data: { facultyId: facultyId },
                success: function (data) {
                    // Add new options
                    $.each(data, function (i, department) {
                        $('#departmentsDropdown').append($('<option></option>').val(department.value).text(department.text));
                    });

                    var departmentId = '@Model.DepartmentId';
                    $('#departmentsDropdown').val(departmentId);
                    FillDirectionsDropdown();
                },
                error: function (xhr, status, error) {
                    // Handle error if any
                    console.error(xhr.responseText);
                }
            });
        }

        function FillDirectionsDropdown() {
            // Your code logic here
            var departmentId = $('#departmentsDropdown').val();
            $.ajax({
                url: '@Url.Action("GetDirectionsByDepartment", "Direction")',
                type: 'GET',
                data: { departmentId: departmentId },
                success: function (data) {
                    // Add new options
                    $.each(data, function (i, direction) {
                        $('#directionsDropdown').append($('<option></option>').val(direction.value).text(direction.text));
                    });

                    var directionId = '@Model.DirectionId';
                    $('#directionsDropdown').val(directionId);
                    FillGroupsDropdown();
                },
                error: function (xhr, status, error) {
                    // Handle error if any
                    console.error(xhr.responseText);
                }
            });
        }

        function FillGroupsDropdown() {
            // Your code logic here
            var directionId = $('#directionsDropdown').val();
            $.ajax({
                url: '@Url.Action("GetGroupsByDirection", "Group")',
                type: 'GET',
                data: { directionId: directionId },
                success: function (data) {
                    // Add new options

                    $.each(data, function (i, group) {
                        $('#groupsDropdown').append($('<option></option>').val(group.value).text(group.text));
                    });
                },
                error: function (xhr, status, error) {
                    // Handle error if any
                    console.error(xhr.responseText);
                }
            });
        }

        $(document).ready(function () {
            $('#facultiesDropdown').change(function () {
                var facultyId = $(this).val();
                if (!facultyId) {
                    // Clear departments dropdown
                    $('#departmentsDropdown').empty();
                    $('#directionsDropdown').empty();
                    $('#groupsDropdown').empty();

                    // Add "select item" option
                    $('#departmentsDropdown').append($('<option>').text('Не выбрано').val(''));
                    $('#directionsDropdown').append($('<option>').text('Не выбрано').val(''));
                    $('#groupsDropdown').append($('<option>').text('Не выбрано').val(''));
                    return; // Exit the function
                }

                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetDepartmentsByFaculty", "Department")',
                    data: { facultyId: facultyId },
                    success: function (response) {
                        // Clear previous options
                        $('#departmentsDropdown').empty();

                        // Add "select item" option
                        $('#departmentsDropdown').append($('<option>').text('Не выбрано').val(''));

                        // Add new options
                        $.each(response, function (i, department) {
                            $('#departmentsDropdown').append($('<option></option>').val(department.value).text(department.text));
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error if any
                        console.error(xhr.responseText);
                    }
                });
            });
        });

        $(document).ready(function () {
            $('#departmentsDropdown').change(function () {
                var departmentId = $(this).val();
                if (!departmentId) {
                    // Clear departments dropdown
                    $('#directionsDropdown').empty();
                    $('#groupsDropdown').empty();

                    // Add "select item" option
                    $('#directionsDropdown').append($('<option>').text('Не выбрано').val(''));
                    $('#groupsDropdown').append($('<option>').text('Не выбрано').val(''));
                    return; // Exit the function
                }

                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetDirectionsByDepartment", "Direction")',
                    data: { departmentId: departmentId },
                    success: function (response) {
                        // Clear previous options
                        $('#directionsDropdown').empty();

                        // Add "select item" option
                        $('#directionsDropdown').append($('<option>').text('Не выбрано').val(''));

                        // Add new options
                        $.each(response, function (i, direction) {
                            $('#directionsDropdown').append($('<option></option>').val(direction.value).text(direction.text));
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error if any
                        console.error(xhr.responseText);
                    }
                });
            });
        });

        $(document).ready(function () {
            $('#directionsDropdown').change(function () {
                var directionId = $(this).val();

                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetEnrolledGroupsByDirection", "Group")',
                    data: { directionId: directionId },
                    success: function (response) {
                        // Clear previous options
                        $('#groupsDropdown').empty();

                        // Add "select item" option
                        $('#groupsDropdown').append($('<option>').text('Не выбрано').val(''));

                        // Add new options
                        $.each(response, function (i, group) {
                            $('#groupsDropdown').append($('<option></option>').val(group.value).text(group.text));
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error if any
                        console.error(xhr.responseText);
                    }
                });
            });
        });
    </script>
}