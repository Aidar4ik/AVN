@model GroupVM
@{
    ViewBag.Title = "Редактирование";
}

@using (Html.BeginForm())
{
    <div class="container mt-3">
        <form>
            <div class="row jumbotron box8">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="col-sm-12 mx-t3 mb-4">
                    <h2 class="text-center text-info">Редактирование группы</h2>
                </div>
                @*start-first-row*@
                <div class="col-sm-3 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.StudingForm):</label>
                    <div class="radio-buttons">
                        <div class="form-check form-check-inline">
                            <label for=@FormOfEducation.FullTime class="form-check-label" style="margin-right: 5px;">@EnumExtensions.GetDisplayName(FormOfEducation.FullTime)</label>
                            @Html.RadioButtonFor(m => m.StudingForm, FormOfEducation.FullTime, new { @class = "form-check-input", @checked = "checked" })
                        </div>
                        <div class="form-check form-check-inline">
                            <label for=@FormOfEducation.Сorrespondence class="form-check-label" style="margin-right: 5px;">@EnumExtensions.GetDisplayName(FormOfEducation.Сorrespondence)</label>
                            @Html.RadioButtonFor(m => m.StudingForm, FormOfEducation.Сorrespondence, new { @class = "form-check-input" })
                        </div>
                    </div>
                    @Html.ValidationMessageFor(x => x.StudingForm, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-3 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.GroupType)*</label>
                    @Html.DropDownListFor(x => x.GroupType, Html.GetEnumSelectList(typeof(GroupType)), "Не выбрано", new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.GroupType, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-2 form-group"></div>
                <div class="form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.DateCreate)</label>
                    @Html.TextBoxFor(x => x.DateCreate, "{0:yyyy-MM-dd}", new { @class = "form-control",@type = "date"})
                    @Html.ValidationMessageFor(x => x.DateCreate, "", new { @class = "text-danger" })
                </div>
                @*end-first-row*@

                @*start-second-row*@
                <div class="col-sm-6 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.GroupName)*</label>
                    @Html.EditorFor(x => x.GroupName, new { htmlAttributes = new { @class = "form-control", placeholder="Введите название группы." }})
                    @Html.ValidationMessageFor(x => x.GroupName, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-6 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.AcademicDegree)*</label>
                    @Html.DropDownListFor(x => x.AcademicDegree, Html.GetEnumSelectList(typeof(AcademicDegree)), "Не выбрано", new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.AcademicDegree, "", new { @class = "text-danger" })
                </div>

                @*end-second-row*@

                @*start-third-row*@
                <div class="col-sm-4 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.AcademicYearId)*</label>
                    @Html.DropDownListFor(x => x.AcademicYearId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "academYearDropdown" })
                    @Html.ValidationMessageFor(x => x.AcademicYearId, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.Course)*</label>
                    @Html.DropDownListFor(x => x.Course, Html.GetEnumSelectList(typeof(Course)), "Не выбрано", new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.Course, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.TrainingPeriod)*</label>
                    @Html.DropDownListFor(x => x.TrainingPeriod, Html.GetEnumSelectList(typeof(TrainingPeriod)), "Не выбрано", new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.TrainingPeriod, "", new { @class = "text-danger" })
                </div>
                @*end-third-row*@

                @*start-fourth-row*@

                @*end-fourth-row*@

                @*start-last-row*@
                <div class="col-sm-5 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.FacultyId)*</label>
                    @Html.DropDownListFor(x => x.FacultyId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "facultiesDropdown" })
                    @Html.ValidationMessageFor(x => x.FacultyId, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4 form-group"></div>
                <div class="col-sm-5 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.DepartmentId)*</label>
                    @Html.DropDownListFor(x => x.DepartmentId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "departmentsDropdown" })
                    @Html.ValidationMessageFor(x => x.DepartmentId, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4 form-group"></div>
                <div class="col-sm-5 form-group">
                    <label class="font-weight-bold">@Html.DisplayNameFor(x => x.DirectionId)*</label>
                    @Html.DropDownListFor(x => x.DirectionId, new List<SelectListItem>(), "Не выбрано", new { @class = "form-control", id = "directionsDropdown" })
                    @Html.ValidationMessageFor(x => x.DirectionId, "", new { @class = "text-danger" })
                </div>

                @*end-last-row*@


                <div class="col-sm-12 row">
                    <div class="col-sm-9"></div>
                    <div class="col-sm-3">
                        <a href="/Group/Index" class="btn btn-secondary btn-lg btn-block-inline" type="button">Назад</a>
                        <button class="btn btn-success btn-lg btn-block-inline" type="submit">Обновить</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $.ajax({
                url: '@Url.Action("GetAcademicYears", "Option")',
                type: 'GET',
                success: function (data) {
                    // Add new options
                    $.each(data, function (i, academYear) {
                        $('#academYearDropdown').append($('<option></option>').val(academYear.value).text(academYear.text));
                    });
                    var academYearId = '@Model.AcademicYearId';
                    $('#academYearDropdown').val(academYearId);
                },
                error: function (xhr, status, error) {
                    // Handle error if any
                    console.error(xhr.responseText);
                }
            });
        });

        $(document).ready(function () {
            $.ajax({
                url: '@Url.Action("GetFaculties", "Faculty")',
                type: 'GET',
                success: function (data) {
                    // Add new options
                    $.each(data, function (i, faculty) {
                        $('#facultiesDropdown').append($('<option></option>').val(faculty.value).text(faculty.text));
                    });

                    var facultyId = '@Model.FacultyId'; // Assuming FacultyId is an integer property
                    $('#facultiesDropdown').val(facultyId);
                    FillDepartmentsDropdown();
                },
                error: function (xhr, status, error) {
                    // Handle error if any
                    console.error(xhr.responseText);
                }
            });
        });

        function FillDepartmentsDropdown() {
            // Your code logic here
            var facultyId = $('#facultiesDropdown').val();
            $.ajax({
                url: '@Url.Action("GetDepartmentsByFaculty", "Department")',
                type: 'GET',
                data: { facultyId: facultyId },
                success: function (data) {
                    // Add new options
                    $.each(data, function (i, department) {
                        $('#departmentsDropdown').append($('<option></option>').val(department.value).text(department.text));
                    });

                    var departmentId = '@Model.DepartmentId';
                    $('#departmentsDropdown').val(departmentId);
                    FillDirectionsDropdown();
                },
                error: function (xhr, status, error) {
                    // Handle error if any
                    console.error(xhr.responseText);
                }
            });
        }

        function FillDirectionsDropdown() {
            // Your code logic here
            var departmentId = $('#departmentsDropdown').val();
            $.ajax({
                url: '@Url.Action("GetDirectionsByDepartment", "Direction")',
                type: 'GET',
                data: { departmentId: departmentId },
                success: function (data) {
                    // Add new options
                    $.each(data, function (i, direction) {
                        $('#directionsDropdown').append($('<option></option>').val(direction.value).text(direction.text));
                    });
                    var directionId = '@Model.DirectionId';
                    $('#directionsDropdown').val(directionId);
                },
                error: function (xhr, status, error) {
                    // Handle error if any
                    console.error(xhr.responseText);
                }
            });
        }

        $(document).ready(function () {
            $('#facultiesDropdown').change(function () {
                var facultyId = $(this).val();
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetDepartmentsByFaculty", "Department")',
                    data: { facultyId: facultyId },
                    success: function (response) {
                        // Clear previous options
                        $('#departmentsDropdown').empty();
                        $('#directionsDropdown').empty();
                        //// Add "select item" option
                        $('#departmentsDropdown').append($('<option>').text('Не выбрано').val(''));
                        $('#directionsDropdown').append($('<option>').text('Не выбрано').val(''));
                        // Add new options
                        $.each(response, function (i, department) {
                            $('#departmentsDropdown').append($('<option></option>').val(department.value).text(department.text));
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error if any
                        console.error(xhr.responseText);
                    }
                });
            });
        });

        $(document).ready(function () {
            $('#departmentsDropdown').change(function () {
                var departmentId = $(this).val();
                if (!departmentId) {
                    // Clear departments dropdown
                    $('#directionsDropdown').empty();

                    // Add "select item" option
                    $('#directionsDropdown').append($('<option>').text('Не выбрано').val(''));
                    return; // Exit the function
                }
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetDirectionsByDepartment", "Direction")',
                    data: { departmentId: departmentId },
                    success: function (response) {
                        // Clear previous options
                        $('#directionsDropdown').empty();

                        // Add "select item" option
                        $('#directionsDropdown').append($('<option>').text('Не выбрано').val(''));

                        // Add new options
                        $.each(response, function (i, direction) {
                            $('#directionsDropdown').append($('<option></option>').val(direction.value).text(direction.text));
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error if any
                        console.error(xhr.responseText);
                    }
                });
            });
        });
    </script>
}