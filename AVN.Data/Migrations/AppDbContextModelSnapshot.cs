// <auto-generated />
using System;
using AVN.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AVN.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AVN.Model.Entities.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearFrom")
                        .HasColumnType("integer");

                    b.Property<int>("YearTo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("AVN.Model.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("GradeBookNumber")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AVN.Model.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DepartmentShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AVN.Model.Entities.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicDegree")
                        .HasColumnType("integer");

                    b.Property<decimal>("CreditCost")
                        .HasColumnType("numeric");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DirectionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DirectionNumber")
                        .HasColumnType("integer");

                    b.Property<string>("DirectionShortName")
                        .HasColumnType("text");

                    b.Property<int>("TrainingPeriod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("AVN.Model.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AVN.Model.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DeanName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacultyShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("AVN.Model.Entities.GradeBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("GradeBooks");
                });

            modelBuilder.Entity("AVN.Model.Entities.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AcademicDegree")
                        .HasColumnType("integer");

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer");

                    b.Property<int>("Course")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DirectionId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GroupType")
                        .HasColumnType("integer");

                    b.Property<int>("StudingForm")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingPeriod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("DirectionId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AVN.Model.Entities.GroupEmployee", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.HasKey("GroupId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("GroupEmployees");
                });

            modelBuilder.Entity("AVN.Model.Entities.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MoveType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MovementTypes");
                });

            modelBuilder.Entity("AVN.Model.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer");

                    b.Property<int>("Course")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<int>("MovementTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AVN.Model.Entities.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MovementTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MovementTypeId");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("AVN.Model.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("AVN.Model.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Citizenship")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EducationalLine")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("GradeBookNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsHasDebt")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecruitmentYear")
                        .HasColumnType("integer");

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AVN.Model.Entities.StudentMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MovementTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("NewGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("NewGroupId");

                    b.HasIndex("OldGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMovements");
                });

            modelBuilder.Entity("AVN.Model.Entities.StudentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Contract")
                        .HasColumnType("numeric");

                    b.Property<int>("Course")
                        .HasColumnType("integer");

                    b.Property<decimal>("Debt")
                        .HasColumnType("numeric");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Payed")
                        .HasColumnType("numeric");

                    b.Property<int>("RecruitmentYear")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPayments");
                });

            modelBuilder.Entity("AVN.Model.Entities.StudentPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Payment")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialPurpose")
                        .HasColumnType("text");

                    b.Property<int?>("StudentPaymentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentPaymentId");

                    b.ToTable("StudentPaymentDetails");
                });

            modelBuilder.Entity("AVN.Model.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ControlForm")
                        .HasColumnType("integer");

                    b.Property<int>("Course")
                        .HasColumnType("integer");

                    b.Property<int>("CreditCounts")
                        .HasColumnType("integer");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<int>("HoursAmount")
                        .HasColumnType("integer");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AVN.Model.Entities.SubjectEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeCreditHours")
                        .HasColumnType("integer");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("EmployeeId1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectEmployees");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AVN.Model.Entities.Department", b =>
                {
                    b.HasOne("AVN.Model.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("AVN.Model.Entities.Direction", b =>
                {
                    b.HasOne("AVN.Model.Entities.Department", "Department")
                        .WithMany("Directions")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AVN.Model.Entities.Employee", b =>
                {
                    b.HasOne("AVN.Model.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AVN.Model.Entities.GradeBook", b =>
                {
                    b.HasOne("AVN.Model.Entities.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.Group", "Group")
                        .WithMany("GradeBook")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.Student", "Student")
                        .WithMany("GradeBook")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.Subject", "Subject")
                        .WithMany("GradeBook")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Group");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AVN.Model.Entities.Group", b =>
                {
                    b.HasOne("AVN.Model.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Groups")
                        .HasForeignKey("AcademicYearId");

                    b.HasOne("AVN.Model.Entities.Direction", "Direction")
                        .WithMany("Groups")
                        .HasForeignKey("DirectionId");

                    b.Navigation("AcademicYear");

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("AVN.Model.Entities.GroupEmployee", b =>
                {
                    b.HasOne("AVN.Model.Entities.Employee", "Employee")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.Group", "Group")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AVN.Model.Entities.Order", b =>
                {
                    b.HasOne("AVN.Model.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Orders")
                        .HasForeignKey("AcademicYearId");

                    b.HasOne("AVN.Model.Entities.Group", "Group")
                        .WithMany("Orders")
                        .HasForeignKey("GroupId");

                    b.HasOne("AVN.Model.Entities.MovementType", "MovementType")
                        .WithMany("Orders")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.OrderType", "OrderType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.Student", "Student")
                        .WithMany("Orders")
                        .HasForeignKey("StudentId");

                    b.Navigation("AcademicYear");

                    b.Navigation("Group");

                    b.Navigation("MovementType");

                    b.Navigation("OrderType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AVN.Model.Entities.OrderType", b =>
                {
                    b.HasOne("AVN.Model.Entities.MovementType", "MovementType")
                        .WithMany("OrderTypes")
                        .HasForeignKey("MovementTypeId");

                    b.Navigation("MovementType");
                });

            modelBuilder.Entity("AVN.Model.Entities.Schedule", b =>
                {
                    b.HasOne("AVN.Model.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Schedules")
                        .HasForeignKey("AcademicYearId");

                    b.HasOne("AVN.Model.Entities.Employee", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("AVN.Model.Entities.Group", "Group")
                        .WithMany("Schedule")
                        .HasForeignKey("GroupId");

                    b.HasOne("AVN.Model.Entities.Subject", "Subject")
                        .WithMany("Schedule")
                        .HasForeignKey("SubjectId");

                    b.Navigation("AcademicYear");

                    b.Navigation("Employee");

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AVN.Model.Entities.Student", b =>
                {
                    b.HasOne("AVN.Model.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AVN.Model.Entities.StudentMovement", b =>
                {
                    b.HasOne("AVN.Model.Entities.AcademicYear", "AcademicYear")
                        .WithMany("StudentMovements")
                        .HasForeignKey("AcademicYearId");

                    b.HasOne("AVN.Model.Entities.MovementType", "MovementType")
                        .WithMany("StudentMovements")
                        .HasForeignKey("MovementTypeId");

                    b.HasOne("AVN.Model.Entities.Group", "NewGroup")
                        .WithMany()
                        .HasForeignKey("NewGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.Group", "OldGroup")
                        .WithMany()
                        .HasForeignKey("OldGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.Student", "Student")
                        .WithMany("StudentMovements")
                        .HasForeignKey("StudentId");

                    b.Navigation("AcademicYear");

                    b.Navigation("MovementType");

                    b.Navigation("NewGroup");

                    b.Navigation("OldGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AVN.Model.Entities.StudentPayment", b =>
                {
                    b.HasOne("AVN.Model.Entities.AcademicYear", "AcademicYear")
                        .WithMany("StudentPayments")
                        .HasForeignKey("AcademicYearId");

                    b.HasOne("AVN.Model.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.Student", "Student")
                        .WithMany("StudentPayments")
                        .HasForeignKey("StudentId");

                    b.Navigation("AcademicYear");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AVN.Model.Entities.StudentPaymentDetail", b =>
                {
                    b.HasOne("AVN.Model.Entities.StudentPayment", "StudentPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("StudentPaymentId");

                    b.Navigation("StudentPayment");
                });

            modelBuilder.Entity("AVN.Model.Entities.Subject", b =>
                {
                    b.HasOne("AVN.Model.Entities.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("AVN.Model.Entities.Employee", "Employee")
                        .WithMany("Subjects")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AVN.Model.Entities.SubjectEmployee", b =>
                {
                    b.HasOne("AVN.Model.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.Navigation("Employee");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AVN.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AVN.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVN.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AVN.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AVN.Model.Entities.AcademicYear", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Orders");

                    b.Navigation("Schedules");

                    b.Navigation("StudentMovements");

                    b.Navigation("StudentPayments");
                });

            modelBuilder.Entity("AVN.Model.Entities.Department", b =>
                {
                    b.Navigation("Directions");

                    b.Navigation("Employees");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AVN.Model.Entities.Direction", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("AVN.Model.Entities.Employee", b =>
                {
                    b.Navigation("GroupEmployees");

                    b.Navigation("Schedules");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AVN.Model.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("AVN.Model.Entities.Group", b =>
                {
                    b.Navigation("GradeBook");

                    b.Navigation("GroupEmployees");

                    b.Navigation("Orders");

                    b.Navigation("Schedule");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("AVN.Model.Entities.MovementType", b =>
                {
                    b.Navigation("OrderTypes");

                    b.Navigation("Orders");

                    b.Navigation("StudentMovements");
                });

            modelBuilder.Entity("AVN.Model.Entities.OrderType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AVN.Model.Entities.Student", b =>
                {
                    b.Navigation("GradeBook");

                    b.Navigation("Orders");

                    b.Navigation("StudentMovements");

                    b.Navigation("StudentPayments");
                });

            modelBuilder.Entity("AVN.Model.Entities.StudentPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("AVN.Model.Entities.Subject", b =>
                {
                    b.Navigation("GradeBook");

                    b.Navigation("Schedule");
                });
#pragma warning restore 612, 618
        }
    }
}
